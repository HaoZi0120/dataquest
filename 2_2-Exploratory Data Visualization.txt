Line Charts---------------------------------------------------------------------
plt.plot(unrate_in_1948["DATE"],unrate_in_1948["VALUE"])
plt.xticks(rotation=90)
plt.xlabel("Month")
plt.ylabel("Unemployment Rate")
plt.title("Monthly Unemployment Trends, 1948")
plt.show()

Multiple plots------------------------------------------------------------------
fig = plt.figure(figsize=(12,5))
ax1 = fig.add_subplot(2,1,1)
ax2 = fig.add_subplot(2,1,2)
ax1.plot(unrate[0:12]['DATE'], unrate[0:12]['VALUE'])
ax1.set_title('Monthly Unemployment Rate, 1948')
ax2.plot(unrate[12:24]['DATE'], unrate[12:24]['VALUE'])
ax2.set_title('Monthly Unemployment Rate, 1949')
plt.show()

unrate['MONTH'] = unrate['DATE'].dt.month
Series.dt.month

plt.plot(unrate[0:12]['MONTH'], unrate[0:12]['VALUE'], c='red', label='1948')
plt.legend(loc='upper left')

Bar Plots-----------------------------------------------------------------------
num_cols = ['RT_user_norm', 'Metacritic_user_nom', 'IMDB_norm', 'Fandango_Ratingvalue', 'Fandango_Stars']
bar_heights = norm_reviews[num_cols].iloc[0].values
bar_positions = arange(5) + 0.75
fig, ax = plt.subplots()
ax.bar(left=bar_positions,height=bar_heights,width=0.5)
plt.show()

num_cols = ['RT_user_norm', 'Metacritic_user_nom', 'IMDB_norm', 'Fandango_Ratingvalue', 'Fandango_Stars']
bar_heights = norm_reviews[num_cols].iloc[0].values
bar_positions = arange(5) + 0.75
tick_positions = range(1,6)
fig, ax = plt.subplots()
ax.bar(left=bar_positions,height=bar_heights,width=0.5)
ax.set_xticks(tick_positions)
ax.set_xticklabels(num_cols, rotation=90)
ax.set_xlabel("Rating Source")
ax.set_ylabel("Average Rating")
ax.set_title("Average User Rating For Avengers: Age of Ultron (2015)")
plt.show()

Scatter Plots-------------------------------------------------------------------
fig, ax = plt.subplots()
ax.scatter(norm_reviews['Fandango_Ratingvalue'], norm_reviews['RT_user_norm'])
ax.set_xlabel('Fandango')
ax.set_ylabel('Rotten Tomatoes')
plt.show()

ax1.scatter(norm_reviews['Fandango_Ratingvalue'], norm_reviews['RT_user_norm'])
ax1.set_xlabel('Fandango')
ax1.set_ylabel('Rotten Tomatoes')
ax1.set_xlim(0, 5)
ax1.set_ylim(0, 5)

Histograms Plots----------------------------------------------------------------
We can generate a histogram using Axes.hist(). This method has only 1 required 
parameter, an iterable object containing the values we want a histogram for. 
By default, matplotlib will:
    calculate the minimum and maximum value from the sequence of values we passed in
    create 10 bins of equal length that span the range from the minimum to the maximum value
    group unique values into the bins
    sum up the associated unique values
    generate a bar for the frequency sum for each bin
	
ax.hist(norm_reviews['Fandango_Ratingvalue'], range=(0, 5))

fig = plt.figure(figsize=(5,20))
ax1 = fig.add_subplot(4,1,1)
ax2 = fig.add_subplot(4,1,2)
ax3 = fig.add_subplot(4,1,3)
ax4 = fig.add_subplot(4,1,4)
ax1.hist(norm_reviews['Fandango_Ratingvalue'], bins=20, range=(0, 5))
ax1.set_title('Distribution of Fandango Ratings')
ax1.set_ylim(0, 50)
ax2.hist(norm_reviews['RT_user_norm'], 20, range=(0, 5))
ax2.set_title('Distribution of Rotten Tomatoes Ratings')
ax2.set_ylim(0, 50)
ax3.hist(norm_reviews['Metacritic_user_nom'], 20, range=(0, 5))
ax3.set_title('Distribution of Metacritic Ratings')
ax3.set_ylim(0, 50)
ax4.hist(norm_reviews['IMDB_norm'], 20, range=(0, 5))
ax4.set_title('Distribution of IMDB Ratings')
ax4.set_ylim(0, 50)
plt.show()

Box Plots-----------------------------------------------------------------------
fig,ax=plt.subplots()
ax.boxplot(norm_reviews['RT_user_norm'])
ax.set_ylim(0,5)
ax.set_xticklabels(['Rotten Tomatoes'])
plt.show()


num_cols = ['RT_user_norm', 'Metacritic_user_nom', 'IMDB_norm', 'Fandango_Ratingvalue']
fig,ax=plt.subplots()
ax.boxplot(norm_reviews[num_cols].values)
ax.set_xticklabels(num_cols)
plt.xticks(rotation=90)
ax.set_ylim(0,5)
plt.show()

Guided Project: Visualizing Earnings Based On College Majors--------------------
Most of the plotting functionality in pandas is contained within the 
DataFrame.plot() method. When we call this method, we specify the data we want 
plotted as well as the type of plot. We use the kind parameter to specify the 
type of plot we want. We use x and y to specify the data we want on each axis. 
You can read about the different parameters in the 
http://pandas.pydata.org/pandas-docs/version/0.19.0/generated/pandas.DataFrame.plot.html.
recent_grads.plot(x='Sample_size', y='Employed', kind='scatter')
recent_grads.plot(x='Sample_size', y='Employed', kind='scatter', title='Employed vs. Sample_size', figsize=(5,10))
ax = recent_grads.plot(x='Sample_size', y='Employed', kind='scatter')
ax.set_title('Employed vs. Sample_size')

The DataFrame.plot() and Series.plot() methods have many of the same parameters 
but are used for different use cases. We use Series.plot() to plot a specific 
column and DataFrame.plot() to generate plots that use values from multiple 
columns. For example, because scatter plots are generated using 2 sets of values
(one for each axis), we can't create a scatter plot using Series.plot().

Unfortunately, Series.plot() doesn't contain parameters for tweaking a histogram
because it was implemented to handle generating standard plots with default 
settings quickly. If we want to control the binning strategy of a histogram, we
should use Series.hist() instead, which contains parameters specific to 
customizing histograms:

recent_grads['Sample_size'].hist(bins=25, range=(0,5000))

Because scatter matrix plots are frequently used in the exploratory data 
analysis, pandas contains a function named scatter_matrix() that generates the 
plots for us. This function is part of the pandas.tools.plotting module and 
needs to be imported separately. To generate a scatter matrix plot for 2 
columns, select just those 2 columns and pass the resulting DataFrame into the 
scatter_matrix() function
scatter_matrix(recent_grads[['Women', 'Men']], figsize=(10,10))

By default, pandas will use the default labels on the x-axis for each bar 
(1 to n) from matplotlib. If we instead use the DataFrame.plot.bar() method, 
we can use the x parameter to specify the labels and the y parameter to 
specify the data for the bars:
recent_grads[:5].plot.bar(x='Major', y='Women')
